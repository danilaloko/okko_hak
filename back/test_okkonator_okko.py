#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è okkonator_okko.py
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

from okkonator_okko import (
    load_okko_vector_db, load_model, init_theta, 
    update_theta, filter_and_rank, profile_keywords,
    explain_recommendation
)

def test_okkonator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å okkonator"""
    print("=== –¢–ï–°–¢ OKKONATOR –î–õ–Ø OKKO ===")
    
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    df, embeddings, metadata, records_metadata = load_okko_vector_db()
    
    if df is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return False
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
    print(f"‚úÖ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {embeddings.shape}")
    print(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(records_metadata)}")
    
    # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    print("\n2. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
    model_kind, model = load_model()
    
    if model is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å")
        return False
    
    print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model_kind}")
    
    # 3. –¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n3. –¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    theta = init_theta()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_answers = [
        {"targets": {"humor": 1, "genre_comedy": 1}, "value": 2},  # —Ö–æ—á—É –∫–æ–º–µ–¥–∏—é
        {"targets": {"prefer_russian": 1}, "value": 2},  # –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Ä–æ—Å—Å–∏–π—Å–∫–æ–µ
        {"targets": {"prefer_movies": 1}, "value": 1},  # —Ñ–∏–ª—å–º—ã –±–æ–ª—å—à–µ —á–µ–º —Å–µ—Ä–∏–∞–ª—ã
    ]
    
    for answer in test_answers:
        update_theta(theta, answer["value"], answer["targets"])
    
    print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    print("\n4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤...")
    keywords = profile_keywords(theta)
    print(f"‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")
    
    # 5. –ü–æ–∏—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    print("\n5. –ü–æ–∏—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
    try:
        recs = filter_and_rank(df, embeddings, records_metadata, theta, model_kind, model, top_k=3)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(recs)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
        for i, (idx, row) in enumerate(recs.iterrows(), start=1):
            record_meta = records_metadata[idx] if idx < len(records_metadata) else {}
            
            title = str(row["serial_name"]) if "serial_name" in row else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            content_type = record_meta.get("content_type", "")
            country = record_meta.get("country", "")
            genres = ", ".join(record_meta.get("genres", []))
            score = row.get("score", 0)
            
            print(f"{i}. {title}")
            print(f"   –¢–∏–ø: {content_type} | –°—Ç—Ä–∞–Ω–∞: {country}")
            print(f"   –ñ–∞–Ω—Ä—ã: {genres}")
            print(f"   –û—Ü–µ–Ω–∫–∞: {score:.3f}")
            
            # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
            why = explain_recommendation(row, theta, record_meta)
            if why:
                print(f"   –ü–æ—á–µ–º—É: {why}")
            print()
        
        print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_okkonator()
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö")
        sys.exit(1)
