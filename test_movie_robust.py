"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–±–æ—Ä–∞ —Ñ–∏–ª—å–º–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
"""

import os
import json
from dotenv import load_dotenv
from movie_recommendation_tool import MovieRecommendationTool

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def test_with_different_models():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏"""
    
    # –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã—Ö –∫ –º–µ–Ω–µ–µ)
    models_to_try = [
        "anthropic/claude-haiku-4.5",
        "qwen/qwen3-vl-8b-thinking",
        "openai/gpt-4o",
        "openai/gpt-4o-mini",
        "anthropic/claude-3.5-sonnet",
        "google/gemini-2.0-flash-001",
        "meta-llama/llama-3.1-8b-instruct"
    ]
    
    test_request = "–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–µ–¥–∏—é"
    
    print("üé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏")
    print("=" * 40)
    
    for model in models_to_try:
        print(f"\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model} ---")
        
        try:
            movie_tool = MovieRecommendationTool()
            result = movie_tool.recommend_movies(test_request, model=model)
            
            if result["success"]:
                data = result["data"]
                print(f"‚úÖ –£—Å–ø–µ—Ö —Å –º–æ–¥–µ–ª—å—é {model}")
                print(f"üìù –°—Ç–∞—Ç—É—Å: {data.get('status')}")
                print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
                
                if data.get('recommended_movie_ids'):
                    print(f"üéØ –§–∏–ª—å–º—ã: {data['recommended_movie_ids']}")
                
                if data.get('clarification_questions'):
                    print(f"‚ùì –í–æ–ø—Ä–æ—Å—ã: {len(data['clarification_questions'])}")
                
                return model  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å –º–æ–¥–µ–ª—å—é {model}: {result.get('error')}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å –º–æ–¥–µ–ª—å—é {model}: {e}")
    
    return None


def test_simple_request():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–µ–∑ structured outputs"""
    
    print("\nüîß –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–µ–∑ structured outputs")
    print("=" * 40)
    
    try:
        from openrouter_with_db_tools import OpenRouterWithDBTools
        
        client = OpenRouterWithDBTools()
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        response = client.simple_db_query("–ü–æ–∫–∞–∂–∏ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –ë–î: {response[:100]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False


def test_database_direct():
    """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüóÑÔ∏è –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 40)
    
    try:
        from database_tool import DatabaseTool
        
        db_tool = DatabaseTool()
        
        # –¢–µ—Å—Ç 1: –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        print("--- –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü ---")
        tables_result = db_tool.get_available_tables()
        if tables_result["success"]:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables_result['data'])}")
            for table in tables_result["data"][:3]:
                print(f"   - {table['table_name']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {tables_result['error']}")
        
        # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤
        print("\n--- –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ ---")
        movies_result = db_tool.execute_sql_query("""
            SELECT title_id, serial_name, content_type 
            FROM title 
            WHERE content_type = '–§–∏–ª—å–º' 
            LIMIT 5
        """)
        if movies_result["success"]:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤: {len(movies_result['data'])}")
            for movie in movies_result["data"]:
                print(f"   - {movie['serial_name']} (ID: {movie['title_id']})")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {movies_result['error']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False


def test_fallback_mode():
    """–¢–µ—Å—Ç fallback —Ä–µ–∂–∏–º–∞ (–±–µ–∑ structured outputs)"""
    
    print("\nüîÑ –¢–µ—Å—Ç fallback —Ä–µ–∂–∏–º–∞")
    print("=" * 30)
    
    try:
        movie_tool = MovieRecommendationTool()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∂–∏–º
        test_request = "–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–µ–¥–∏—é"
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ fallback
        original_method = movie_tool._send_structured_request
        movie_tool._send_structured_request = movie_tool._send_regular_request_with_json_instruction
        
        result = movie_tool.recommend_movies(test_request, model="openai/gpt-4o")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        movie_tool._send_structured_request = original_method
        
        if result["success"]:
            data = result["data"]
            print(f"‚úÖ Fallback —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"üìù –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ fallback: {result.get('error')}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ fallback —Ç–µ—Å—Ç–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üé¨ Robust Movie Recommendation Test Suite")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["OPENROUTER_API_KEY", "DB_HOST", "DB_NAME", "DB_USER", "DB_PASSWORD"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return
    
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    db_works = test_database_direct()
    
    if not db_works:
        print("\n‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ OpenRouter
    simple_works = test_simple_request()
    
    if not simple_works:
        print("\n‚ö†Ô∏è OpenRouter API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Database Tools –Ω–∞–ø—Ä—è–º—É—é")
        return
    
    # –¢–µ—Å—Ç 3: Fallback —Ä–µ–∂–∏–º
    fallback_works = test_fallback_mode()
    
    if fallback_works:
        print("\n‚úÖ Fallback —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("\n‚ö†Ô∏è Fallback —Ä–µ–∂–∏–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç 4: –†–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
    working_model = test_with_different_models()
    
    if working_model:
        print(f"\nüéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {working_model}")
    else:
        print("\n‚ö†Ô∏è Structured outputs –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ fallback —Ä–µ–∂–∏–º–µ")
    
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ï—Å–ª–∏ structured outputs –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ fallback")
    print("2. Fallback —Ä–µ–∂–∏–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è JSON")
    print("3. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Database Tools —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç OpenRouter")


if __name__ == "__main__":
    main()
