"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ retry –ª–æ–≥–∏–∫–∏
"""

import os
import json
from dotenv import load_dotenv
from openrouter_with_db_tools import OpenRouterWithDBTools

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def test_with_different_models():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏"""
    
    # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    models_to_try = [
        "openai/gpt-4o",
        "anthropic/claude-3-sonnet", 
        "google/gemini-2.0-flash-001",
        "meta-llama/llama-3.1-8b-instruct"
    ]
    
    test_question = "–ü–æ–∫–∞–∂–∏ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ ===\n")
    
    for model in models_to_try:
        print(f"--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model} ---")
        
        try:
            client = OpenRouterWithDBTools()
            response = client.simple_db_query(test_question, model=model)
            
            if "–û—à–∏–±–∫–∞" not in response:
                print(f"‚úÖ –£—Å–ø–µ—Ö —Å –º–æ–¥–µ–ª—å—é {model}")
                print(f"–û—Ç–≤–µ—Ç: {response[:200]}...")
                return model  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å –º–æ–¥–µ–ª—å—é {model}: {response}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å –º–æ–¥–µ–ª—å—é {model}: {e}")
        
        print("-" * 60)
    
    return None


def test_direct_database_only():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ Database Tool –±–µ–∑ OpenRouter"""
    
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ Database Tool ===\n")
    
    try:
        from database_tool import DatabaseTool
        
        db_tool = DatabaseTool()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –¢–µ—Å—Ç 1: –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        print("\n--- –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü ---")
        tables_result = db_tool.get_available_tables()
        if tables_result["success"]:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables_result['data'])}")
            for table in tables_result["data"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  - {table['table_name']} ({table['table_type']})")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {tables_result['error']}")
        
        # –¢–µ—Å—Ç 2: –í–µ—Ä—Å–∏—è PostgreSQL
        print("\n--- –í–µ—Ä—Å–∏—è PostgreSQL ---")
        version_result = db_tool.execute_sql_query("SELECT version()")
        if version_result["success"]:
            print(f"‚úÖ {version_result['data'][0]['version']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {version_result['error']}")
        
        # –¢–µ—Å—Ç 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ
        print("\n--- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ ---")
        db_info_result = db_tool.execute_sql_query("""
            SELECT 
                current_database() as database_name,
                current_user as current_user,
                inet_server_addr() as server_ip,
                inet_server_port() as server_port
        """)
        if db_info_result["success"]:
            info = db_info_result["data"][0]
            print(f"‚úÖ –ë–∞–∑–∞: {info['database_name']}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {info['current_user']}")
            print(f"   –°–µ—Ä–≤–µ—Ä: {info['server_ip']}:{info['server_port']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {db_info_result['error']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ë–î: {e}")
        return False


def test_manual_tool_calls():
    """–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ tool calls"""
    
    print("\n=== –†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Tool Calls ===\n")
    
    try:
        from database_tool import execute_database_query, list_database_tables
        
        # –¢–µ—Å—Ç 1: –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        print("--- Tool: list_database_tables ---")
        result = list_database_tables()
        result_data = json.loads(result)
        if result_data["success"]:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(result_data['data'])}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result_data['error']}")
        
        # –¢–µ—Å—Ç 2: SQL –∑–∞–ø—Ä–æ—Å
        print("\n--- Tool: execute_database_query ---")
        result = execute_database_query("SELECT current_timestamp as current_time")
        result_data = json.loads(result)
        if result_data["success"]:
            print(f"‚úÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {result_data['data'][0]['current_time']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result_data['error']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ tool calls: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üîß Robust Database Tools Test Suite")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["OPENROUTER_API_KEY", "DB_HOST", "DB_NAME", "DB_USER", "DB_PASSWORD"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return
    
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # –¢–µ—Å—Ç 1: –¢–æ–ª—å–∫–æ Database Tool
    db_works = test_direct_database_only()
    
    if not db_works:
        print("\n‚ùå Database Tool –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î.")
        return
    
    # –¢–µ—Å—Ç 2: –†—É—á–Ω—ã–µ tool calls
    tools_work = test_manual_tool_calls()
    
    if not tools_work:
        print("\n‚ùå Tool calls –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.")
        return
    
    # –¢–µ—Å—Ç 3: OpenRouter —Å —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
    working_model = test_with_different_models()
    
    if working_model:
        print(f"\nüéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {working_model}")
    else:
        print("\n‚ö†Ô∏è  OpenRouter API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ Database Tools —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("   –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Database Tools –Ω–∞–ø—Ä—è–º—É—é")


if __name__ == "__main__":
    main()
