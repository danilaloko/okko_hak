"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é Claude Haiku 4.5
"""

import os
import json
from dotenv import load_dotenv
import requests

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def test_claude_haiku_direct():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏ Claude Haiku —á–µ—Ä–µ–∑ OpenRouter"""
    
    print("üß† –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ Claude Haiku 4.5")
    print("=" * 40)
    
    api_key = os.getenv("OPENROUTER_API_KEY")
    if not api_key:
        print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "anthropic/claude-haiku-4.5",
        "messages": [
            {
                "role": "system",
                "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ñ–∏–ª—å–º–æ–≤. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
            },
            {
                "role": "user",
                "content": "–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–µ–¥–∏—é. –ß—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å?"
            }
        ],
        "temperature": 0.7,
        "max_tokens": 200
    }
    
    try:
        print("üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude Haiku...")
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            ai_response = data["choices"][0]["message"]["content"]
            
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Claude Haiku:")
            print(f"üí¨ {ai_response}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if any(word in ai_response.lower() for word in ['–∫–æ–º–µ–¥–∏—è', '—Ñ–∏–ª—å–º', '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', '—Ä–µ–∫–æ–º–µ–Ω–¥—É—é']):
                print("üéâ –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                return True
            else:
                print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö —Å–ª–æ–≤")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_simple_chat_service():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∞—Ç —Å–µ—Ä–≤–∏—Å–∞"""
    
    print("\nüí¨ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∞—Ç —Å–µ—Ä–≤–∏—Å–∞")
    print("=" * 40)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω
        health_response = requests.get("http://localhost:5004/health", timeout=5)
        if health_response.status_code != 200:
            print("‚ùå –ß–∞—Ç —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
        
        print("‚úÖ –ß–∞—Ç —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_data = {
            "user_id": "test_user",
            "message": "–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–µ–¥–∏—é",
            "model": "anthropic/claude-haiku-4.5"
        }
        
        print("üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        response = requests.post(
            "http://localhost:5004/api/chat/message",
            json=test_data,
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                ai_response = data.get('response', '')
                print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —á–∞—Ç —Å–µ—Ä–≤–∏—Å–∞:")
                print(f"üí¨ {ai_response}")
                print(f"ü§ñ –ú–æ–¥–µ–ª—å: {data.get('model')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {data.get('error')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üß† –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ Claude Haiku 4.5")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not os.getenv("OPENROUTER_API_KEY"):
        print("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
    direct_success = test_claude_haiku_direct()
    
    # –¢–µ—Å—Ç 2: –ß–µ—Ä–µ–∑ —á–∞—Ç —Å–µ—Ä–≤–∏—Å
    service_success = test_simple_chat_service()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
    print(f"  - –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Claude Haiku: {'‚úÖ' if direct_success else '‚ùå'}")
    print(f"  - –ß–µ—Ä–µ–∑ —á–∞—Ç —Å–µ—Ä–≤–∏—Å: {'‚úÖ' if service_success else '‚ùå'}")
    
    if direct_success and service_success:
        print(f"\nüéâ –ú–æ–¥–µ–ª—å Claude Haiku 4.5 —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"   - –ú–æ–¥–µ–ª—å –±—ã—Å—Ç—Ä–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è")
        print(f"   - –•–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
        print(f"   - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    elif direct_success:
        print(f"\n‚ö†Ô∏è –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º")
    else:
        print(f"\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥–µ–ª—å—é –∏–ª–∏ API")


if __name__ == "__main__":
    main()
