"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
"""

import os
import json
from dotenv import load_dotenv
from movie_recommendation_tool import MovieRecommendationTool

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def test_simple_request():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞"""
    
    print("üîß –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞")
    print("=" * 50)
    
    try:
        movie_tool = MovieRecommendationTool()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        test_request = "–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–µ–¥–∏—é"
        print(f"üîç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: \"{test_request}\"")
        
        result = movie_tool.recommend_movies(test_request, model="qwen/qwen3-vl-8b-thinking")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"‚úÖ –£—Å–ø–µ—Ö: {result['success']}")
        
        if result["success"]:
            data = result["data"]
            print(f"üìù –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
            
            if data.get('recommended_movie_ids'):
                print(f"üéØ –§–∏–ª—å–º—ã: {data['recommended_movie_ids']}")
            
            if data.get('clarification_questions'):
                print(f"‚ùì –í–æ–ø—Ä–æ—Å—ã: {len(data['clarification_questions'])}")
            
            if data.get('confidence') is not None:
                confidence_percent = int(data['confidence'] * 100)
                print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_percent}%")
            
            print(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏–π: {result.get('iterations')}")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            if 'raw_content' in result:
                print(f"üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {result['raw_content'][:200]}...")
            
            if 'cleaned_content' in result:
                print(f"üßπ –û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {result['cleaned_content'][:200]}...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüìã –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(json.dumps(result, ensure_ascii=False, indent=2))
        
        return result["success"]
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_fallback_mode():
    """–¢–µ—Å—Ç fallback —Ä–µ–∂–∏–º–∞"""
    
    print("\nüîÑ –¢–µ—Å—Ç fallback —Ä–µ–∂–∏–º–∞")
    print("=" * 30)
    
    try:
        movie_tool = MovieRecommendationTool()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∂–∏–º
        test_request = "–ü–æ–∫–∞–∂–∏ —Ñ–∏–ª—å–º—ã —Å –õ–µ–æ–Ω–∞—Ä–¥–æ –î–∏–ö–∞–ø—Ä–∏–æ"
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ fallback
        original_method = movie_tool._send_structured_request
        movie_tool._send_structured_request = movie_tool._send_regular_request_with_json_instruction
        
        result = movie_tool.recommend_movies(test_request, model="qwen/qwen3-vl-8b-thinking")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        movie_tool._send_structured_request = original_method
        
        if result["success"]:
            data = result["data"]
            print(f"‚úÖ Fallback —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"üìù –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ fallback: {result.get('error')}")
            if 'raw_content' in result:
                print(f"üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {result['raw_content'][:200]}...")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ fallback —Ç–µ—Å—Ç–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîß –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["OPENROUTER_API_KEY", "DB_HOST", "DB_NAME", "DB_USER", "DB_PASSWORD"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return
    
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # –¢–µ—Å—Ç 1: –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    success1 = test_simple_request()
    
    # –¢–µ—Å—Ç 2: Fallback —Ä–µ–∂–∏–º
    success2 = test_fallback_mode()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
    print(f"  - –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {'‚úÖ' if success1 else '‚ùå'}")
    print(f"  - Fallback —Ä–µ–∂–∏–º: {'‚úÖ' if success2 else '‚ùå'}")
    
    if success1 or success2:
        print(f"\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!")
    else:
        print(f"\n‚ö†Ô∏è  –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")


if __name__ == "__main__":
    main()
