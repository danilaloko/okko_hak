"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç fallback —Ä–µ–∂–∏–º–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–±–æ—Ä–∞ —Ñ–∏–ª—å–º–æ–≤
"""

import os
import json
from dotenv import load_dotenv
from movie_recommendation_tool import MovieRecommendationTool

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def test_fallback_mode():
    """–¢–µ—Å—Ç fallback —Ä–µ–∂–∏–º–∞ (–±–µ–∑ structured outputs)"""
    
    print("üîÑ –¢–µ—Å—Ç Fallback —Ä–µ–∂–∏–º–∞")
    print("=" * 30)
    
    try:
        movie_tool = MovieRecommendationTool()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∂–∏–º
        test_request = "–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–µ–¥–∏—é"
        
        print(f"üîç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: \"{test_request}\"")
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ fallback
        original_method = movie_tool._send_structured_request
        movie_tool._send_structured_request = movie_tool._send_regular_request_with_json_instruction
        
        result = movie_tool.recommend_movies(test_request, model="qwen/qwen3-vl-8b-thinking")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        movie_tool._send_structured_request = original_method
        
        if result["success"]:
            data = result["data"]
            print(f"\n‚úÖ Fallback —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"üìù –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
            
            if data.get('recommended_movie_ids'):
                print(f"üéØ –§–∏–ª—å–º—ã: {data['recommended_movie_ids']}")
            
            if data.get('clarification_questions'):
                print("‚ùì –£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:")
                for question in data['clarification_questions']:
                    print(f"   - {question}")
            
            if data.get('search_criteria'):
                criteria = data['search_criteria']
                print("üîç –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:")
                if criteria.get('genres'):
                    print(f"   –ñ–∞–Ω—Ä—ã: {', '.join(criteria['genres'])}")
                if criteria.get('content_type'):
                    print(f"   –¢–∏–ø: {criteria['content_type']}")
            
            if data.get('confidence') is not None:
                confidence_percent = int(data['confidence'] * 100)
                print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_percent}%")
            
            print(f"\nüîÑ –ò—Ç–µ—Ä–∞—Ü–∏–π: {result.get('iterations')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π JSON
            print(f"\nüìã –ü–æ–ª–Ω—ã–π JSON –æ—Ç–≤–µ—Ç:")
            print(json.dumps(data, ensure_ascii=False, indent=2))
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ fallback: {result.get('error')}")
            if result.get('message'):
                print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message')}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ fallback —Ç–µ—Å—Ç–∞: {e}")
        return False


def test_database_only():
    """–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\nüóÑÔ∏è –¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 30)
    
    try:
        from database_tool import DatabaseTool
        
        db_tool = DatabaseTool()
        
        # –ü–æ–∏—Å–∫ –∫–æ–º–µ–¥–∏–π
        print("--- –ü–æ–∏—Å–∫ –∫–æ–º–µ–¥–∏–π ---")
        comedy_result = db_tool.execute_sql_query("""
            SELECT t.title_id, t.serial_name, t.content_type, t.release_date
            FROM title t
            JOIN title_genre tg ON t.title_id = tg.title_id
            JOIN genre g ON tg.genre_id = g.genre_id
            WHERE g.name ILIKE '%–∫–æ–º–µ–¥–∏—è%' 
            AND t.content_type = '–§–∏–ª—å–º'
            LIMIT 5
        """)
        
        if comedy_result["success"]:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–µ–¥–∏–π: {len(comedy_result['data'])}")
            for movie in comedy_result["data"]:
                print(f"   - {movie['serial_name']} (ID: {movie['title_id']}, {movie['release_date']})")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–µ–¥–∏–π: {comedy_result['error']}")
        
        # –ü–æ–∏—Å–∫ –∂–∞–Ω—Ä–æ–≤
        print("\n--- –î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã ---")
        genres_result = db_tool.execute_sql_query("""
            SELECT name FROM genre 
            WHERE name ILIKE '%–∫–æ–º–µ–¥–∏—è%' OR name ILIKE '%–¥—Ä–∞–º–∞%' OR name ILIKE '%–±–æ–µ–≤–∏–∫%'
            LIMIT 10
        """)
        
        if genres_result["success"]:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∂–∞–Ω—Ä–æ–≤: {len(genres_result['data'])}")
            for genre in genres_result["data"]:
                print(f"   - {genre['name']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤: {genres_result['error']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üé¨ Fallback Test Suite")
    print("=" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["OPENROUTER_API_KEY", "DB_HOST", "DB_NAME", "DB_USER", "DB_PASSWORD"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return
    
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # –¢–µ—Å—Ç 1: –¢–æ–ª—å–∫–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    db_works = test_database_only()
    
    if not db_works:
        print("\n‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    # –¢–µ—Å—Ç 2: Fallback —Ä–µ–∂–∏–º
    fallback_works = test_fallback_mode()
    
    if fallback_works:
        print("\nüéâ Fallback —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ fallback –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö structured outputs")
        print("2. Fallback —Ä–µ–∂–∏–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è JSON")
        print("3. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø—Ä–æ—Å—Ç–æ –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–∏ structured outputs")
    else:
        print("\n‚ö†Ô∏è Fallback —Ä–µ–∂–∏–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenRouter API")


if __name__ == "__main__":
    main()
