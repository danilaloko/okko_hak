"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–±–æ—Ä–∞ —Ñ–∏–ª—å–º–æ–≤
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenRouter Structured Outputs
"""

import os
import json
from dotenv import load_dotenv
from movie_recommendation_tool import MovieRecommendationTool

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def test_movie_recommendations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–±–æ—Ä–∞ —Ñ–∏–ª—å–º–æ–≤"""
    
    print("üé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–±–æ—Ä–∞ —Ñ–∏–ª—å–º–æ–≤")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–±–æ—Ä–∞ —Ñ–∏–ª—å–º–æ–≤
        movie_tool = MovieRecommendationTool()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–±–æ—Ä–∞ —Ñ–∏–ª—å–º–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_requests = [
            {
                "request": "–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–µ–¥–∏—é",
                "description": "–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ –∂–∞–Ω—Ä—É"
            },
            {
                "request": "–ü–æ–∫–∞–∂–∏ —Ñ–∏–ª—å–º—ã —Å –õ–µ–æ–Ω–∞—Ä–¥–æ –î–∏–ö–∞–ø—Ä–∏–æ",
                "description": "–ü–æ–∏—Å–∫ –ø–æ –∞–∫—Ç–µ—Ä—É"
            },
            {
                "request": "–ù—É–∂–µ–Ω —Ö–æ—Ä–æ—à–∏–π –±–æ–µ–≤–∏–∫ 2020-2023 –≥–æ–¥–∞",
                "description": "–ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É –∏ –≥–æ–¥—É"
            },
            {
                "request": "–†–µ–∫–æ–º–µ–Ω–¥—É–π —á—Ç–æ-—Ç–æ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ",
                "description": "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
            },
            {
                "request": "–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-—Ç–æ",
                "description": "–û—á–µ–Ω—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
            }
        ]
        
        for i, test_case in enumerate(test_requests, 1):
            print(f"--- –¢–µ—Å—Ç {i}: {test_case['description']} ---")
            print(f"–ó–∞–ø—Ä–æ—Å: \"{test_case['request']}\"")
            
            try:
                result = movie_tool.recommend_movies(test_case['request'])
                
                if result["success"]:
                    data = result["data"]
                    
                    print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {data.get('status')}")
                    print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if data.get('clarification_questions'):
                        print(f"‚ùì –£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:")
                        for question in data['clarification_questions']:
                            print(f"   - {question}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if data.get('search_criteria'):
                        criteria = data['search_criteria']
                        print(f"üîç –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:")
                        if criteria.get('genres'):
                            print(f"   –ñ–∞–Ω—Ä—ã: {', '.join(criteria['genres'])}")
                        if criteria.get('actors'):
                            print(f"   –ê–∫—Ç–µ—Ä—ã: {', '.join(criteria['actors'])}")
                        if criteria.get('directors'):
                            print(f"   –†–µ–∂–∏—Å—Å–µ—Ä—ã: {', '.join(criteria['directors'])}")
                        if criteria.get('year_from') or criteria.get('year_to'):
                            year_range = f"{criteria.get('year_from', '?')}-{criteria.get('year_to', '?')}"
                            print(f"   –ì–æ–¥—ã: {year_range}")
                        if criteria.get('content_type'):
                            print(f"   –¢–∏–ø: {criteria['content_type']}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã
                    if data.get('recommended_movie_ids'):
                        print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ ID —Ñ–∏–ª—å–º–æ–≤: {data['recommended_movie_ids']}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    if data.get('confidence') is not None:
                        confidence_percent = int(data['confidence'] * 100)
                        print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_percent}%")
                    
                    print(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏–π: {result.get('iterations', 'N/A')}")
                    
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
                    print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message')}")
                
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            
            print("-" * 60)
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env —Ñ–∞–π–ª)")
        print("2. –î–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        print("3. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")


def test_structured_output_schema():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —Å—Ö–µ–º—ã –¥–ª—è structured outputs"""
    
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —Å—Ö–µ–º—ã")
    print("=" * 30)
    
    # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    example_response = {
        "status": "found",
        "message": "–ù–∞—à–µ–ª –æ—Ç–ª–∏—á–Ω—ã–µ –∫–æ–º–µ–¥–∏–∏ –¥–ª—è –≤–∞—Å! –†–µ–∫–æ–º–µ–Ω–¥—É—é —ç—Ç–∏ —Ñ–∏–ª—å–º—ã.",
        "clarification_questions": [],
        "recommended_movie_ids": [123, 456, 789],
        "search_criteria": {
            "genres": ["–ö–æ–º–µ–¥–∏—è"],
            "actors": [],
            "directors": [],
            "year_from": None,
            "year_to": None,
            "content_type": "–§–∏–ª—å–º"
        },
        "confidence": 0.85
    }
    
    print("–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:")
    print(json.dumps(example_response, ensure_ascii=False, indent=2))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ö–µ–º–µ
    required_fields = ["status", "message"]
    optional_fields = [
        "clarification_questions", "recommended_movie_ids", 
        "search_criteria", "confidence"
    ]
    
    print(f"\n‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {required_fields}")
    print(f"üìù –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è: {optional_fields}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
    valid_statuses = ["need_more_info", "searching", "found", "not_found"]
    print(f"üìä –í–∞–ª–∏–¥–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: {valid_statuses}")


def interactive_test():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    
    print("\nüéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("=" * 30)
    print("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞ (–∏–ª–∏ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    
    try:
        movie_tool = MovieRecommendationTool()
        
        while True:
            user_input = input("\n> ").strip()
            
            if user_input.lower() in ['quit', 'exit', '–≤—ã—Ö–æ–¥']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not user_input:
                continue
            
            print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: \"{user_input}\"")
            
            try:
                result = movie_tool.recommend_movies(user_input)
                
                if result["success"]:
                    data = result["data"]
                    print(f"\nüìù {data.get('message')}")
                    
                    if data.get('recommended_movie_ids'):
                        print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã: {data['recommended_movie_ids']}")
                    
                    if data.get('clarification_questions'):
                        print("‚ùì –£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:")
                        for question in data['clarification_questions']:
                            print(f"   - {question}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('message')}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üé¨ Movie Recommendation System Test Suite")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["OPENROUTER_API_KEY", "DB_HOST", "DB_NAME", "DB_USER", "DB_PASSWORD"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        print("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ env_example.txt")
        return
    
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã
    test_structured_output_schema()
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_movie_recommendations()
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        interactive_test()
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")


if __name__ == "__main__":
    main()
