/* ==============================
   Results - –≠–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   ============================== */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentRecommendations = [];
let selectionHistory = [];
let currentFilters = {
    platform: '',
    language: '',
    duration: '',
    novelty: ''
};
let diversificationLevel = 0.5;
let okkonatorRecommendations = [];
let okkonatorProfile = {};
let swipeRecommendations = [];
let swipeProfile = {};
let currentDataSource = 'okkonator'; // 'okkonator' –∏–ª–∏ 'swipe'

// –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message, data = null) {
    console.log(`[–†–µ–∑—É–ª—å—Ç–∞—Ç—ã] ${message}`, data || '');
}

function logError(message, error = null) {
    console.error(`[–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –û–®–ò–ë–ö–ê] ${message}`, error || '');
}

function logSuccess(message, data = null) {
    console.log(`[–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –£–°–ü–ï–•] ${message}`, data || '');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    initializeResults();
});

// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function initializeResults() {
    log('–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    hideLoadingScreen();
    setupEventListeners();
    loadSelectionHistory();
    loadOkkonatorRecommendations();
    loadSwipeRecommendations();
    loadRecommendations();
    setupFilters();
}

// –°–∫—Ä—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
function hideLoadingScreen() {
    setTimeout(() => {
        const loadingScreen = document.getElementById('loadingScreen');
        if (loadingScreen) {
            loadingScreen.classList.add('hidden');
        }
    }, 1000);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    const backBtn = document.getElementById('backBtn');
    if (backBtn) {
        backBtn.addEventListener('click', () => {
            window.location.href = '/';
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
    const shareBtn = document.getElementById('shareBtn');
    if (shareBtn) {
        shareBtn.addEventListener('click', () => {
            shareResults();
        });
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const filterToggle = document.getElementById('filterToggle');
    if (filterToggle) {
        filterToggle.addEventListener('click', () => {
            toggleFilters();
        });
    }
    
    // –§–∏–ª—å—Ç—Ä—ã
    const platformFilter = document.getElementById('platformFilter');
    const languageFilter = document.getElementById('languageFilter');
    const durationFilter = document.getElementById('durationFilter');
    const noveltyFilter = document.getElementById('noveltyFilter');
    
    if (platformFilter) {
        platformFilter.addEventListener('change', (e) => {
            currentFilters.platform = e.target.value;
            applyFilters();
        });
    }
    if (languageFilter) {
        languageFilter.addEventListener('change', (e) => {
            currentFilters.language = e.target.value;
            applyFilters();
        });
    }
    if (durationFilter) {
        durationFilter.addEventListener('change', (e) => {
            currentFilters.duration = e.target.value;
            applyFilters();
        });
    }
    if (noveltyFilter) {
        noveltyFilter.addEventListener('change', (e) => {
            currentFilters.novelty = e.target.value;
            applyFilters();
        });
    }
    
    // –°–ª–∞–π–¥–µ—Ä –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const diversificationSlider = document.getElementById('diversificationSlider');
    if (diversificationSlider) {
        diversificationSlider.addEventListener('input', (e) => {
            diversificationLevel = parseFloat(e.target.value);
            applyDiversification();
        });
    }
    
    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    const saveSetBtn = document.getElementById('saveSetBtn');
    const refreshBtn = document.getElementById('refreshBtn');
    
    if (saveSetBtn) {
        saveSetBtn.addEventListener('click', () => {
            showSaveSetModal();
        });
    }
    if (refreshBtn) {
        refreshBtn.addEventListener('click', () => {
            loadRecommendations();
        });
    }
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    const modalClose = document.getElementById('modalClose');
    const saveSetModalClose = document.getElementById('saveSetModalClose');
    const confirmSaveSetBtn = document.getElementById('confirmSaveSetBtn');
    
    if (modalClose) {
        modalClose.addEventListener('click', () => {
            hideModal();
        });
    }
    if (saveSetModalClose) {
        saveSetModalClose.addEventListener('click', () => {
            hideSaveSetModal();
        });
    }
    if (confirmSaveSetBtn) {
        confirmSaveSetBtn.addEventListener('click', () => {
            saveSet();
        });
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–±–æ—Ä–æ–∫
async function loadSelectionHistory() {
    try {
        const response = await fetch('/api/history');
        if (response.ok) {
            const data = await response.json();
            selectionHistory = data.history;
            displaySelectionHistory(data.history);
            updateHistoryStats(data.total);
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç –û–∫–∫–æ–Ω–∞—Ç–æ—Ä–∞
function loadOkkonatorRecommendations() {
    log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç –û–∫–∫–æ–Ω–∞—Ç–æ—Ä–∞ –≤ localStorage');
    
    const storedRecommendations = localStorage.getItem('okkonator_recommendations');
    const storedProfile = localStorage.getItem('okkonator_profile');
    
    if (storedRecommendations) {
        try {
            okkonatorRecommendations = JSON.parse(storedRecommendations);
            logSuccess(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${okkonatorRecommendations.length} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç –û–∫–∫–æ–Ω–∞—Ç–æ—Ä–∞`);
            
            if (storedProfile) {
                okkonatorProfile = JSON.parse(storedProfile);
                log('–ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –û–∫–∫–æ–Ω–∞—Ç–æ—Ä–∞:', okkonatorProfile);
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –û–∫–∫–æ–Ω–∞—Ç–æ—Ä–∞
            displayOkkonatorRecommendations();
            
            // –û—á–∏—â–∞–µ–º localStorage –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            localStorage.removeItem('okkonator_recommendations');
            localStorage.removeItem('okkonator_profile');
            
        } catch (error) {
            logError('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç –û–∫–∫–æ–Ω–∞—Ç–æ—Ä–∞:', error);
        }
    } else {
        log('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –û–∫–∫–æ–Ω–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
    }
}

function loadSwipeRecommendations() {
    log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç —Å–≤–∞–π–ø–æ–≤ –≤ localStorage');
    
    const storedRecommendations = localStorage.getItem('swipeRecommendations');
    const storedProfile = localStorage.getItem('userProfile');
    
    if (storedRecommendations) {
        try {
            swipeRecommendations = JSON.parse(storedRecommendations);
            logSuccess(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${swipeRecommendations.length} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç —Å–≤–∞–π–ø–æ–≤`);
            
            if (storedProfile) {
                swipeProfile = JSON.parse(storedProfile);
                log('–ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å —Å–≤–∞–π–ø–æ–≤:', swipeProfile);
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —Å–≤–∞–π–ø–æ–≤
            displaySwipeRecommendations();
            
            // –û—á–∏—â–∞–µ–º localStorage –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            localStorage.removeItem('swipeRecommendations');
            localStorage.removeItem('userProfile');
            
        } catch (error) {
            logError('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç —Å–≤–∞–π–ø–æ–≤:', error);
        }
    } else {
        log('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —Å–≤–∞–π–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç –û–∫–∫–æ–Ω–∞—Ç–æ—Ä–∞
function displayOkkonatorRecommendations() {
    log('–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –û–∫–∫–æ–Ω–∞—Ç–æ—Ä–∞');
    
    const recommendationsContainer = document.getElementById('recommendationsContainer');
    if (!recommendationsContainer) {
        logError('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    recommendationsContainer.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const header = document.createElement('div');
    header.className = 'recommendations-header';
    header.innerHTML = `
        <h2>üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –û–∫–∫–æ–Ω–∞—Ç–æ—Ä–∞</h2>
        <p>–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –º—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å–º—ã –¥–ª—è –≤–∞—Å</p>
    `;
    recommendationsContainer.appendChild(header);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const grid = document.createElement('div');
    grid.className = 'recommendations-grid';
    
    okkonatorRecommendations.forEach((movie, index) => {
        const card = createMovieCard(movie, index, 'okkonator');
        grid.appendChild(card);
    });
    
    recommendationsContainer.appendChild(grid);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç —Å–≤–∞–π–ø–æ–≤
function displaySwipeRecommendations() {
    log('–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —Å–≤–∞–π–ø–æ–≤');
    
    const recommendationsContainer = document.getElementById('recommendationsContainer');
    if (!recommendationsContainer) {
        logError('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    recommendationsContainer.innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const header = document.createElement('div');
    header.className = 'recommendations-header';
    header.innerHTML = `
        <h2>üí´ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–∞–π–ø–æ–≤</h2>
        <p>–ú—ã –∏–∑—É—á–∏–ª–∏ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –ø–æ–¥–æ–±—Ä–∞–ª–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å–º—ã</p>
    `;
    recommendationsContainer.appendChild(header);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const grid = document.createElement('div');
    grid.className = 'recommendations-grid';
    
    swipeRecommendations.forEach((movie, index) => {
        const card = createMovieCard(movie, index, 'swipe');
        grid.appendChild(card);
    });
    
    recommendationsContainer.appendChild(grid);
    
    logSuccess(`–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ ${swipeRecommendations.length} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç —Å–≤–∞–π–ø–æ–≤`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∏–ª—å–º–∞
function createMovieCard(movie, index, source = 'default') {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ–∫
    function cleanData(data) {
        if (!data) return '';
        return data.toString().replace(/[\[\]']/g, '').replace(/'/g, '');
    }
    
    const card = document.createElement('div');
    card.className = `movie-card ${source}`;
    card.style.cursor = movie.url ? 'pointer' : 'default';
    
    card.innerHTML = `
        <div style="padding: 12px;">
            <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 8px;">
                <h3 style="margin: 0; font-size: 16px; color: var(--okko-text); font-weight: 600; flex: 1;">${movie.title}</h3>
                <div style="display: flex; gap: 6px; margin-left: 10px;">
                    <span style="background: rgba(239, 68, 68, 0.9); color: white; padding: 2px 6px; border-radius: 4px; font-size: 10px; font-weight: 600;">${movie.age_rating || 'N/A'}</span>
                    <span style="background: rgba(123, 97, 255, 0.9); color: white; padding: 2px 6px; border-radius: 4px; font-size: 10px; font-weight: 600;">${movie.content_type || '–ö–æ–Ω—Ç–µ–Ω—Ç'}</span>
                </div>
            </div>
            <p style="margin: 0 0 4px 0; font-size: 13px; color: var(--okko-text-muted);">${cleanData(movie.country) || '–°—Ç—Ä–∞–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
            <p style="margin: 0 0 6px 0; font-size: 12px; color: var(--okko-text-muted-2);">${cleanData(movie.genres) || '–ñ–∞–Ω—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}</p>
            ${movie.reason ? `<p style="margin: 0 0 6px 0; font-size: 11px; color: var(--okko-accent); font-style: italic;">${movie.reason}</p>` : ''}
            ${movie.description ? `<p style="margin: 0 0 8px 0; font-size: 11px; color: var(--okko-text-muted-2); line-height: 1.3; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;">${movie.description}</p>` : ''}
            <div style="display: flex; gap: 8px; margin-top: 8px;">
                <button class="action-btn like-btn" onclick="event.stopPropagation(); likeMovie(${index}, '${source}')" style="background: rgba(239, 68, 68, 0.2); border: 1px solid rgba(239, 68, 68, 0.5); color: #EF4444; padding: 6px 12px; border-radius: 6px; font-size: 12px; cursor: pointer; transition: all 0.3s ease;">
                    <i class="fas fa-heart"></i> –õ–∞–π–∫
                </button>
                <button class="action-btn watch-btn" onclick="event.stopPropagation(); watchMovie(${index}, '${source}')" style="background: rgba(123, 97, 255, 0.2); border: 1px solid rgba(123, 97, 255, 0.5); color: #7B61FF; padding: 6px 12px; border-radius: 6px; font-size: 12px; cursor: pointer; transition: all 0.3s ease;">
                    <i class="fas fa-play"></i> –°–º–æ—Ç—Ä–µ—Ç—å
                </button>
            </div>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏
    if (movie.url) {
        card.addEventListener('click', () => {
            window.open(movie.url, '_blank');
        });
    }
    
    return card;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞ —Ñ–∏–ª—å–º–∞
function likeMovie(index, source) {
    log(`–õ–∞–π–∫ —Ñ–∏–ª—å–º–∞ ${index} –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ${source}`);
    
    const movie = source === 'okkonator' ? okkonatorRecommendations[index] : currentRecommendations[index];
    if (movie) {
        logSuccess(`–î–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: ${movie.title}`);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        showSuccessMessage(`"${movie.title}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!`);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–∞
function watchMovie(index, source) {
    log(`–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–∞ ${index} –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ${source}`);
    
    const movie = source === 'okkonator' ? okkonatorRecommendations[index] : currentRecommendations[index];
    if (movie) {
        logSuccess(`–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä: ${movie.title}`);
        showSuccessMessage(`–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É "${movie.title}"!`);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
function showSuccessMessage(message) {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = 'success-notification';
    notification.textContent = message;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: var(--okko-success);
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        z-index: 1000;
        font-weight: 500;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    `;
    
    document.body.appendChild(notification);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 3000);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
async function loadRecommendations() {
    try {
        showLoadingScreen('–§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è');
        
        const response = await fetch('/api/results');
        if (response.ok) {
            const data = await response.json();
            currentRecommendations = data.recommendations;
            displayRecommendations(data.recommendations);
            updateRecommendationsCount(data.recommendations.length);
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
        showErrorMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
        hideLoadingScreen();
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
function displayRecommendations(recommendations) {
    const recommendationsList = document.getElementById('recommendationsList');
    if (!recommendationsList) return;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ–∫
    function cleanData(data) {
        if (!data) return '';
        return data.toString().replace(/[\[\]']/g, '').replace(/'/g, '');
    }
    
    recommendationsList.innerHTML = recommendations
        .map(rec => `
            <div class="recommendation-card" data-movie-id="${rec.id}" style="cursor: ${rec.url ? 'pointer' : 'default'};">
                <div class="recommendation-poster" style="background-image: url('${rec.poster}')">
                    <div class="poster-overlay">
                        <div class="age-rating">${rec.age_rating || 'N/A'}</div>
                        <div class="content-type">${rec.content_type || '–ö–æ–Ω—Ç–µ–Ω—Ç'}</div>
                    </div>
                </div>
                <div class="recommendation-info">
                    <div class="recommendation-title">${rec.title}</div>
                    <div class="recommendation-meta">
                        <span class="recommendation-country">${cleanData(rec.country) || '–°—Ç—Ä–∞–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
                        <span class="recommendation-genres">${cleanData(rec.genres) || '–ñ–∞–Ω—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}</span>
                    </div>
                    <div class="recommendation-reason">${rec.reason}</div>
                    ${rec.description ? `<div class="recommendation-description">${rec.description}</div>` : ''}
                    <div class="recommendation-actions">
                        <button class="action-btn primary-btn" onclick="event.stopPropagation(); showMovieDetails(${rec.id})">
                            <i class="fas fa-info-circle"></i>
                            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                        </button>
                        <button class="action-btn secondary-btn" onclick="event.stopPropagation(); addToWatchlist(${rec.id})">
                            <i class="fas fa-plus"></i>
                            –í —Å–ø–∏—Å–æ–∫
                        </button>
                    </div>
                </div>
            </div>
        `)
        .join('');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    recommendations.forEach((rec, index) => {
        if (rec.url) {
            const card = recommendationsList.children[index];
            if (card) {
                card.addEventListener('click', () => {
                    window.open(rec.url, '_blank');
                });
            }
        }
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–±–æ—Ä–æ–∫
function displaySelectionHistory(history) {
    const historyList = document.getElementById('historyList');
    if (!historyList) return;
    
    historyList.innerHTML = history
        .map(selection => `
            <div class="history-item">
                <div class="history-header">
                    <div class="history-date">${formatDate(selection.date)}</div>
                    <div class="history-method">${selection.method}</div>
                </div>
                <div class="history-movies">
                    <div class="movies-scroll-container">
                        ${selection.movies.map(movie => `
                            <div class="history-movie-card" data-movie-id="${movie.id}">
                                <div class="movie-poster" style="background-image: url('${movie.poster}')"></div>
                                <div class="movie-title">${movie.title}</div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>
        `)
        .join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
function updateHistoryStats(total) {
    const totalEl = document.getElementById('totalSelections');
    if (totalEl) {
        totalEl.textContent = total;
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString) {
    const date = new Date(dateString);
    const options = { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    };
    return date.toLocaleDateString('ru-RU', options);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
function updateRecommendationsCount(count) {
    const countEl = document.getElementById('recommendationsCount');
    if (countEl) {
        countEl.textContent = count;
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function setupFilters() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const filtersContent = document.getElementById('filtersContent');
    if (filtersContent) {
        filtersContent.style.display = 'none';
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function toggleFilters() {
    const filtersContent = document.getElementById('filtersContent');
    const filterToggle = document.getElementById('filterToggle');
    
    if (filtersContent && filterToggle) {
        const isVisible = filtersContent.style.display !== 'none';
        filtersContent.style.display = isVisible ? 'none' : 'block';
        filterToggle.classList.toggle('active', !isVisible);
    }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function applyFilters() {
    let filteredRecommendations = [...currentRecommendations];
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    if (currentFilters.platform) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        console.log('–§–∏–ª—å—Ç—Ä –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ:', currentFilters.platform);
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫—É
    if (currentFilters.language) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —è–∑—ã–∫—É
        console.log('–§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫—É:', currentFilters.language);
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (currentFilters.duration) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        console.log('–§–∏–ª—å—Ç—Ä –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', currentFilters.duration);
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–æ–≤–∏–∑–Ω–µ
    if (currentFilters.novelty) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –Ω–æ–≤–∏–∑–Ω–µ
        console.log('–§–∏–ª—å—Ç—Ä –ø–æ –Ω–æ–≤–∏–∑–Ω–µ:', currentFilters.novelty);
    }
    
    displayRecommendations(filteredRecommendations);
    updateRecommendationsCount(filteredRecommendations.length);
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
function applyDiversification() {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    // –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    console.log('–£—Ä–æ–≤–µ–Ω—å –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:', diversificationLevel);
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    loadRecommendations();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ñ–∏–ª—å–º–∞
function showMovieDetails(movieId) {
    const movie = currentRecommendations.find(rec => rec.id === movieId);
    if (!movie) return;
    
    const modal = document.getElementById('movieModal');
    const movieTitle = document.getElementById('movieTitle');
    const movieDetails = document.getElementById('movieDetails');
    
    if (modal && movieTitle && movieDetails) {
        movieTitle.textContent = movie.title;
        movieDetails.innerHTML = `
            <div class="movie-details-content">
                <div class="movie-poster" style="background-image: url('${movie.poster}')"></div>
                <div class="movie-info">
                    <div class="movie-year">${movie.year}</div>
                    <div class="movie-genre">${movie.genre}</div>
                    <div class="movie-rating">–†–µ–π—Ç–∏–Ω–≥: ${movie.rating}</div>
                    <div class="movie-description">${movie.description}</div>
                    <div class="movie-reason">${movie.reason}</div>
                </div>
            </div>
        `;
        modal.classList.add('active');
    }
}

// –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function addToWatchlist(movieId) {
    const movie = currentRecommendations.find(rec => rec.id === movieId);
    if (movie) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        console.log('–î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', movie.title);
        
        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        const button = event.target.closest('.action-btn');
        if (button) {
            button.innerHTML = '<i class="fas fa-check"></i> –î–æ–±–∞–≤–ª–µ–Ω–æ';
            button.classList.add('success');
        }
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ç–∞
function showSaveSetModal() {
    const modal = document.getElementById('saveSetModal');
    const selectedMovies = document.getElementById('selectedMovies');
    
    if (modal && selectedMovies) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã
        selectedMovies.innerHTML = currentRecommendations
            .slice(0, 3) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            .map(rec => `
                <div class="selected-movie">
                    <div class="movie-poster" style="background-image: url('${rec.poster}')"></div>
                    <div class="movie-title">${rec.title}</div>
                </div>
            `)
            .join('');
        
        modal.classList.add('active');
    }
}

// –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ç–∞
function hideSaveSetModal() {
    const modal = document.getElementById('saveSetModal');
    if (modal) {
        modal.classList.remove('active');
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ç–∞
function saveSet() {
    const setName = document.getElementById('setName').value;
    const setDescription = document.getElementById('setDescription').value;
    
    if (!setName.trim()) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∞');
        return;
    }
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ç–∞
    console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ç:', { name: setName, description: setDescription });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    alert('–°–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
    hideSaveSetModal();
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
function shareResults() {
    if (navigator.share) {
        navigator.share({
            title: '–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤',
            text: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –º–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤!',
            url: window.location.href
        });
    } else {
        // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Share API
        const shareText = `–ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤: ${window.location.href}`;
        navigator.clipboard.writeText(shareText).then(() => {
            alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        });
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
function showErrorMessage(message) {
    const recommendationsList = document.getElementById('recommendationsList');
    if (recommendationsList) {
        recommendationsList.innerHTML = `
            <div class="error-message">
                <div class="error-icon">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                <p>${message}</p>
                <button class="action-btn primary-btn" onclick="loadRecommendations()">
                    <i class="fas fa-redo"></i>
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
                </button>
            </div>
        `;
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω
function showLoadingScreen(title, text) {
    const loadingScreen = document.getElementById('loadingScreen');
    const loadingTitle = document.querySelector('.loading-title');
    const loadingText = document.querySelector('.loading-text');
    
    if (loadingScreen) {
        loadingScreen.style.display = 'flex';
    }
    if (loadingTitle && title) {
        loadingTitle.textContent = title;
    }
    if (loadingText && text) {
        loadingText.textContent = text;
    }
}

// –°–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —ç–∫—Ä–∞–Ω
function hideLoadingScreen() {
    const loadingScreen = document.getElementById('loadingScreen');
    if (loadingScreen) {
        loadingScreen.style.display = 'none';
    }
}

// –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function hideModal() {
    const modal = document.getElementById('movieModal');
    if (modal) {
        modal.classList.remove('active');
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function animateOnScroll() {
    const elements = document.querySelectorAll('.recommendation-card, .filter-group');
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    });
    
    elements.forEach(element => {
        element.style.opacity = '0';
        element.style.transform = 'translateY(20px)';
        element.style.transition = 'all 0.6s ease';
        observer.observe(element);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
setTimeout(animateOnScroll, 500);
