// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentMovie = null;
let likedCount = 0;
let dislikedCount = 0;
let isAnimating = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    hideLoadingScreen();
    loadCurrentMovie();
    setupTouchEvents();
});

// –°–∫—Ä—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
function hideLoadingScreen() {
    setTimeout(() => {
        const loadingScreen = document.getElementById('loadingScreen');
        loadingScreen.classList.add('hidden');
    }, 1000);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª—å–º–∞
async function loadCurrentMovie() {
    try {
        const response = await fetch('/api/current-movie');
        if (response.ok) {
            currentMovie = await response.json();
            displayMovie(currentMovie);
        } else {
            showNoMoreMovies();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å–º–∞:', error);
        showNoMoreMovies();
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞
function displayMovie(movie) {
    const cardsContainer = document.getElementById('cardsContainer');
    cardsContainer.innerHTML = '';

    const card = createMovieCard(movie);
    cardsContainer.appendChild(card);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        card.classList.add('enter');
    }, 100);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∏–ª—å–º–∞
function createMovieCard(movie) {
    const card = document.createElement('div');
    card.className = 'movie-card';
    card.dataset.movieId = movie.id;

    card.innerHTML = `
        <div class="movie-poster" style="background-image: url('${movie.poster}')"></div>
        <div class="movie-info">
            <h2 class="movie-title">${movie.title}</h2>
            <div class="movie-year">${movie.year}</div>
            <div class="movie-genre">${movie.genre}</div>
            <div class="movie-description">${movie.description}</div>
            <div class="movie-rating">
                <i class="fas fa-star"></i>
                <span>${movie.rating}/10</span>
            </div>
        </div>
        <div class="swipe-indicator like">‚ù§Ô∏è –ù–†–ê–í–ò–¢–°–Ø</div>
        <div class="swipe-indicator dislike">üíî –ù–ï –ù–†–ê–í–ò–¢–°–Ø</div>
    `;

    return card;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ touch —Å–æ–±—ã—Ç–∏–π
function setupTouchEvents() {
    const cardsContainer = document.getElementById('cardsContainer');
    
    let startX = 0;
    let startY = 0;
    let currentX = 0;
    let currentY = 0;
    let isDragging = false;

    // Touch —Å–æ–±—ã—Ç–∏—è
    cardsContainer.addEventListener('touchstart', handleTouchStart, { passive: false });
    cardsContainer.addEventListener('touchmove', handleTouchMove, { passive: false });
    cardsContainer.addEventListener('touchend', handleTouchEnd, { passive: false });

    // Mouse —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    cardsContainer.addEventListener('mousedown', handleMouseDown);
    cardsContainer.addEventListener('mousemove', handleMouseMove);
    cardsContainer.addEventListener('mouseup', handleMouseUp);

    function handleTouchStart(e) {
        if (isAnimating) return;
        
        const touch = e.touches[0];
        startX = touch.clientX;
        startY = touch.clientY;
        isDragging = true;
        
        const card = getCurrentCard();
        if (card) {
            card.classList.add('swiping');
        }
    }

    function handleTouchMove(e) {
        if (!isDragging || isAnimating) return;
        
        e.preventDefault();
        const touch = e.touches[0];
        currentX = touch.clientX;
        currentY = touch.clientY;
        
        const deltaX = currentX - startX;
        const deltaY = currentY - startY;
        
        updateCardPosition(deltaX, deltaY);
        updateSwipeIndicators(deltaX);
    }

    function handleTouchEnd(e) {
        if (!isDragging || isAnimating) return;
        
        isDragging = false;
        const deltaX = currentX - startX;
        
        if (Math.abs(deltaX) > 100) {
            const action = deltaX > 0 ? 'like' : 'dislike';
            swipeMovie(action);
        } else {
            resetCardPosition();
        }
    }

    function handleMouseDown(e) {
        if (isAnimating) return;
        
        startX = e.clientX;
        startY = e.clientY;
        isDragging = true;
        
        const card = getCurrentCard();
        if (card) {
            card.classList.add('swiping');
        }
        
        e.preventDefault();
    }

    function handleMouseMove(e) {
        if (!isDragging || isAnimating) return;
        
        currentX = e.clientX;
        currentY = e.clientY;
        
        const deltaX = currentX - startX;
        const deltaY = currentY - startY;
        
        updateCardPosition(deltaX, deltaY);
        updateSwipeIndicators(deltaX);
    }

    function handleMouseUp(e) {
        if (!isDragging || isAnimating) return;
        
        isDragging = false;
        const deltaX = currentX - startX;
        
        if (Math.abs(deltaX) > 100) {
            const action = deltaX > 0 ? 'like' : 'dislike';
            swipeMovie(action);
        } else {
            resetCardPosition();
        }
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
function getCurrentCard() {
    return document.querySelector('.movie-card');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
function updateCardPosition(deltaX, deltaY) {
    const card = getCurrentCard();
    if (!card) return;
    
    const rotation = deltaX * 0.1;
    const opacity = Math.max(0.3, 1 - Math.abs(deltaX) / 200);
    
    card.style.transform = `translate(${deltaX}px, ${deltaY}px) rotate(${rotation}deg)`;
    card.style.opacity = opacity;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–≤–∞–π–ø–∞
function updateSwipeIndicators(deltaX) {
    const likeIndicator = document.querySelector('.swipe-indicator.like');
    const dislikeIndicator = document.querySelector('.swipe-indicator.dislike');
    
    if (deltaX > 50) {
        likeIndicator.classList.add('show');
        dislikeIndicator.classList.remove('show');
    } else if (deltaX < -50) {
        dislikeIndicator.classList.add('show');
        likeIndicator.classList.remove('show');
    } else {
        likeIndicator.classList.remove('show');
        dislikeIndicator.classList.remove('show');
    }
}

// –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
function resetCardPosition() {
    const card = getCurrentCard();
    if (!card) return;
    
    card.style.transform = '';
    card.style.opacity = '';
    card.classList.remove('swiping');
    
    // –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    document.querySelectorAll('.swipe-indicator').forEach(indicator => {
        indicator.classList.remove('show');
    });
}

// –°–≤–∞–π–ø —Ñ–∏–ª—å–º–∞
async function swipeMovie(action) {
    if (isAnimating || !currentMovie) return;
    
    isAnimating = true;
    const card = getCurrentCard();
    
    if (card) {
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å–≤–∞–π–ø–∞
        card.classList.add(action);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if (action === 'like') {
            likedCount++;
            document.getElementById('likedCount').textContent = likedCount;
        } else {
            dislikedCount++;
            document.getElementById('dislikedCount').textContent = dislikedCount;
        }
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        try {
            const response = await fetch('/api/swipe', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ action: action })
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.next_available) {
                    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∏–ª—å–º–∞
                    setTimeout(() => {
                        loadCurrentMovie();
                        isAnimating = false;
                    }, 300);
                } else {
                    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                    setTimeout(() => {
                        showNoMoreMovies();
                        isAnimating = false;
                    }, 300);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–∞–π–ø–∞:', error);
            isAnimating = false;
        }
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
function showNoMoreMovies() {
    document.getElementById('cardsContainer').style.display = 'none';
    document.getElementById('actionButtons').style.display = 'none';
    document.getElementById('noMoreMovies').style.display = 'block';
}

// –°–±—Ä–æ—Å —Ñ–∏–ª—å–º–æ–≤
async function resetMovies() {
    try {
        const response = await fetch('/api/reset');
        if (response.ok) {
            // –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            likedCount = 0;
            dislikedCount = 0;
            document.getElementById('likedCount').textContent = '0';
            document.getElementById('dislikedCount').textContent = '0';
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫
            document.getElementById('cardsContainer').style.display = 'block';
            document.getElementById('actionButtons').style.display = 'flex';
            document.getElementById('noMoreMovies').style.display = 'none';
            
            // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º
            loadCurrentMovie();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞:', error);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ haptic feedback –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
function addHapticFeedback(type = 'light') {
    if ('vibrate' in navigator) {
        const patterns = {
            light: [50],
            medium: [100],
            heavy: [200],
            success: [50, 50, 100]
        };
        navigator.vibrate(patterns[type] || patterns.light);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
function addVisualEffect(type, element) {
    const effects = {
        sparkle: () => createSparkleEffect(element),
        pulse: () => element.style.animation = 'pulse 0.3s ease-out',
        shake: () => element.style.animation = 'shake 0.5s ease-out'
    };
    
    if (effects[type]) {
        effects[type]();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏—Å–∫—Ä
function createSparkleEffect(element) {
    const sparkles = 5;
    for (let i = 0; i < sparkles; i++) {
        const sparkle = document.createElement('div');
        sparkle.className = 'sparkle';
        sparkle.style.cssText = `
            position: absolute;
            width: 4px;
            height: 4px;
            background: radial-gradient(circle, #ffd700, transparent);
            border-radius: 50%;
            pointer-events: none;
            z-index: 1000;
            animation: sparkleAnimation 1s ease-out forwards;
        `;
        
        const rect = element.getBoundingClientRect();
        sparkle.style.left = (rect.left + Math.random() * rect.width) + 'px';
        sparkle.style.top = (rect.top + Math.random() * rect.height) + 'px';
        
        document.body.appendChild(sparkle);
        
        setTimeout(() => sparkle.remove(), 1000);
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–∞–π–ø–æ–≤ —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
const originalSwipeMovie = swipeMovie;
swipeMovie = function(action) {
    addHapticFeedback(action === 'like' ? 'success' : 'medium');
    
    const card = getCurrentCard();
    if (card) {
        addVisualEffect('sparkle', card);
    }
    
    return originalSwipeMovie(action);
};

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–≤–∞–π–ø–æ–≤
let swipeStartTime = 0;
document.addEventListener('touchstart', function() {
    swipeStartTime = Date.now();
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–≤–∞–π–ø–∞
const originalHandleTouchEnd = handleTouchEnd;
function handleTouchEnd(e) {
    const swipeDuration = Date.now() - swipeStartTime;
    if (swipeDuration < 100) return; // –ú–∏–Ω–∏–º—É–º 100–º—Å –¥–ª—è —Å–≤–∞–π–ø–∞
    
    return originalHandleTouchEnd(e);
}
