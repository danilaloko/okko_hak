"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—É—Å—Ç—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
"""

import os
import json
from dotenv import load_dotenv
from movie_recommendation_tool import MovieRecommendationTool

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def test_models_with_empty_response_handling():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—É—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    
    print("üîß –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
    print("=" * 50)
    
    # –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    models_to_test = [
        "anthropic/claude-haiku-4.5",
        "openai/gpt-4o-mini",
        "qwen/qwen3-vl-8b-thinking"
    ]
    
    test_request = "–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–µ–¥–∏—é"
    
    for model in models_to_test:
        print(f"\n--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model} ---")
        
        try:
            movie_tool = MovieRecommendationTool()
            result = movie_tool.recommend_movies(test_request, model=model)
            
            if result["success"]:
                data = result["data"]
                print(f"‚úÖ –£—Å–ø–µ—Ö —Å –º–æ–¥–µ–ª—å—é {model}")
                print(f"üìù –°—Ç–∞—Ç—É—Å: {data.get('status')}")
                print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
                
                if data.get('recommended_movie_ids'):
                    print(f"üéØ –§–∏–ª—å–º—ã: {data['recommended_movie_ids']}")
                
                if data.get('clarification_questions'):
                    print(f"‚ùì –í–æ–ø—Ä–æ—Å—ã: {len(data['clarification_questions'])}")
                
                if data.get('confidence') is not None:
                    confidence_percent = int(data['confidence'] * 100)
                    print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_percent}%")
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
                if data.get('status') in ['found', 'need_more_info', 'searching', 'not_found']:
                    print(f"üéâ –ú–æ–¥–µ–ª—å {model} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                    return model
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å –º–æ–¥–µ–ª—å—é {model}: {result.get('error')}")
                if 'raw_content' in result:
                    print(f"üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {result['raw_content'][:100]}...")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å –º–æ–¥–µ–ª—å—é {model}: {e}")
    
    return None


def test_fallback_robustness():
    """–¢–µ—Å—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ fallback —Ä–µ–∂–∏–º–∞"""
    
    print("\nüîÑ –¢–µ—Å—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ fallback —Ä–µ–∂–∏–º–∞")
    print("=" * 40)
    
    try:
        movie_tool = MovieRecommendationTool()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ä–µ–∂–∏–º
        test_request = "–ü–æ–∫–∞–∂–∏ —Ñ–∏–ª—å–º—ã —Å –õ–µ–æ–Ω–∞—Ä–¥–æ –î–∏–ö–∞–ø—Ä–∏–æ"
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ fallback
        original_method = movie_tool._send_structured_request
        movie_tool._send_structured_request = movie_tool._send_regular_request_with_json_instruction
        
        result = movie_tool.recommend_movies(test_request, model="anthropic/claude-haiku-4.5")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        movie_tool._send_structured_request = original_method
        
        if result["success"]:
            data = result["data"]
            print(f"‚úÖ Fallback —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"üìù –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if data.get('status') in ['found', 'need_more_info', 'searching', 'not_found']:
                print(f"üéâ Fallback —Ä–µ–∂–∏–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
                return True
            else:
                print(f"‚ö†Ô∏è Fallback —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π: {data.get('status')}")
                return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ fallback: {result.get('error')}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ fallback —Ç–µ—Å—Ç–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîß –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—É—Å—Ç—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["OPENROUTER_API_KEY", "DB_HOST", "DB_NAME", "DB_USER", "DB_PASSWORD"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return
    
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # –¢–µ—Å—Ç 1: –†–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
    working_model = test_models_with_empty_response_handling()
    
    # –¢–µ—Å—Ç 2: Fallback —Ä–µ–∂–∏–º
    fallback_works = test_fallback_robustness()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
    if working_model:
        print(f"‚úÖ –†–∞–±–æ—á–∞—è –º–æ–¥–µ–ª—å: {working_model}")
    else:
        print(f"‚ùå –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print(f"üîÑ Fallback —Ä–µ–∂–∏–º: {'‚úÖ' if fallback_works else '‚ùå'}")
    
    if working_model or fallback_works:
        print(f"\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!")
        print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if working_model:
            print(f"   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥–µ–ª—å: {working_model}")
        if fallback_works:
            print(f"   - Fallback —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤")
    else:
        print(f"\n‚ö†Ô∏è  –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")


if __name__ == "__main__":
    main()
