"""
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ Qwen3-VL-8B-Thinking
"""

import os
import json
from dotenv import load_dotenv
from movie_recommendation_tool import MovieRecommendationTool

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def test_qwen_model():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Qwen3-VL-8B-Thinking"""
    
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Qwen3-VL-8B-Thinking")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å –º–æ–¥–µ–ª—å—é Qwen
        movie_tool = MovieRecommendationTool()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –º–æ–¥–µ–ª—å—é Qwen")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ thinking capabilities
        test_requests = [
            {
                "request": "–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–µ–¥–∏—é",
                "description": "–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ –∂–∞–Ω—Ä—É"
            },
            {
                "request": "–ü–æ–∫–∞–∂–∏ —Ñ–∏–ª—å–º—ã —Å –õ–µ–æ–Ω–∞—Ä–¥–æ –î–∏–ö–∞–ø—Ä–∏–æ",
                "description": "–ü–æ–∏—Å–∫ –ø–æ –∞–∫—Ç–µ—Ä—É"
            },
            {
                "request": "–ù—É–∂–µ–Ω —Ö–æ—Ä–æ—à–∏–π –±–æ–µ–≤–∏–∫ 2020-2023 –≥–æ–¥–∞",
                "description": "–ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É –∏ –≥–æ–¥—É"
            },
            {
                "request": "–†–µ–∫–æ–º–µ–Ω–¥—É–π —á—Ç–æ-—Ç–æ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ",
                "description": "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
            },
            {
                "request": "–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ",
                "description": "–û—á–µ–Ω—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
            }
        ]
        
        for i, test_case in enumerate(test_requests, 1):
            print(f"\n--- –¢–µ—Å—Ç {i}: {test_case['description']} ---")
            print(f"–ó–∞–ø—Ä–æ—Å: \"{test_case['request']}\"")
            
            try:
                result = movie_tool.recommend_movies(
                    test_case['request'], 
                    model="qwen/qwen3-vl-8b-thinking"
                )
                
                if result["success"]:
                    data = result["data"]
                    
                    print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {data.get('status')}")
                    print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if data.get('clarification_questions'):
                        print(f"‚ùì –£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:")
                        for question in data['clarification_questions']:
                            print(f"   - {question}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if data.get('search_criteria'):
                        criteria = data['search_criteria']
                        print(f"üîç –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:")
                        if criteria.get('genres'):
                            print(f"   –ñ–∞–Ω—Ä—ã: {', '.join(criteria['genres'])}")
                        if criteria.get('actors'):
                            print(f"   –ê–∫—Ç–µ—Ä—ã: {', '.join(criteria['actors'])}")
                        if criteria.get('directors'):
                            print(f"   –†–µ–∂–∏—Å—Å–µ—Ä—ã: {', '.join(criteria['directors'])}")
                        if criteria.get('year_from') or criteria.get('year_to'):
                            year_range = f"{criteria.get('year_from', '?')}-{criteria.get('year_to', '?')}"
                            print(f"   –ì–æ–¥—ã: {year_range}")
                        if criteria.get('content_type'):
                            print(f"   –¢–∏–ø: {criteria['content_type']}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã
                    if data.get('recommended_movie_ids'):
                        print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ ID —Ñ–∏–ª—å–º–æ–≤: {data['recommended_movie_ids']}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    if data.get('confidence') is not None:
                        confidence_percent = int(data['confidence'] * 100)
                        print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_percent}%")
                    
                    print(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏–π: {result.get('iterations', 'N/A')}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π JSON –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ thinking –ø—Ä–æ—Ü–µ—Å—Å–∞
                    print(f"\nüìã –ü–æ–ª–Ω—ã–π JSON –æ—Ç–≤–µ—Ç:")
                    print(json.dumps(data, ensure_ascii=False, indent=2))
                    
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
                    print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message')}")
                
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            
            print("-" * 60)
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Qwen –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


def test_qwen_thinking_capabilities():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ thinking capabilities –º–æ–¥–µ–ª–∏ Qwen"""
    
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ thinking capabilities")
    print("=" * 40)
    
    try:
        movie_tool = MovieRecommendationTool()
        
        # –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ reasoning
        complex_request = """
        –Ø —Ö–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º, –Ω–æ –Ω–µ –∑–Ω–∞—é —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å. 
        –ú–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è —Ñ–∏–ª—å–º—ã —Å —Ö–æ—Ä–æ—à–∏–º —Å—é–∂–µ—Ç–æ–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏. 
        –ù–µ –ª—é–±–ª—é —É–∂–∞—Å—ã –∏ —Å–ª–∏—à–∫–æ–º –∂–µ—Å—Ç–æ–∫–∏–µ —Ñ–∏–ª—å–º—ã. 
        –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —á—Ç–æ-—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ, –Ω–æ –Ω–µ –ø—Ä–æ—Ç–∏–≤ –∏ –∫–ª–∞—Å—Å–∏–∫–∏.
        –ß—Ç–æ –±—ã —Ç—ã –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞–ª?
        """
        
        print(f"üîç –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å: \"{complex_request.strip()}\"")
        
        result = movie_tool.recommend_movies(
            complex_request, 
            model="qwen/qwen3-vl-8b-thinking"
        )
        
        if result["success"]:
            data = result["data"]
            
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç thinking –∞–Ω–∞–ª–∏–∑–∞:")
            print(f"üìù –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ reasoning
            if data.get('clarification_questions'):
                print(f"\nüß† –ö–∞—á–µ—Å—Ç–≤–æ reasoning (—É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã):")
                for i, question in enumerate(data['clarification_questions'], 1):
                    print(f"   {i}. {question}")
            
            if data.get('search_criteria'):
                criteria = data['search_criteria']
                print(f"\nüéØ –í—ã–≤–µ–¥–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:")
                if criteria.get('genres'):
                    print(f"   –ñ–∞–Ω—Ä—ã: {', '.join(criteria['genres'])}")
                if criteria.get('content_type'):
                    print(f"   –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {criteria['content_type']}")
            
            if data.get('confidence') is not None:
                confidence_percent = int(data['confidence'] * 100)
                print(f"\nüéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ: {confidence_percent}%")
            
            print(f"\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π reasoning: {result.get('iterations')}")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ thinking: {result.get('error')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ thinking —Ç–µ—Å—Ç–∞: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üß† Qwen3-VL-8B-Thinking Test Suite")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["OPENROUTER_API_KEY", "DB_HOST", "DB_NAME", "DB_USER", "DB_PASSWORD"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return
    
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_qwen_model()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ thinking capabilities
    test_qwen_thinking_capabilities()
    
    print("\nüìã –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ Qwen3-VL-8B-Thinking:")
    print("1. üß† Thinking capabilities - –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç '–¥—É–º–∞—Ç—å' –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º")
    print("2. üéØ –õ—É—á—à–µ –ø–æ–Ω–∏–º–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
    print("3. üîç –ë–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π")
    print("4. üìä –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö")
    print("5. üé¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ structured outputs")


if __name__ == "__main__":
    main()
